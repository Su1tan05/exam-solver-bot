import typing as t
from telebot.types import Message
from telebot.async_telebot import AsyncTeleBot
from states.user_information import UserInformation
from utils.string_parser import parse_string_to_list
from solver.solve_exam_task import solve_first, solve_second
import pathlib

class MessageHandler:

    def __init__(self, bot: AsyncTeleBot):
        self.bot = bot

    async def start_handler(self, message: Message):
        await self.bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç üñê, {message.from_user.first_name}, '
                                           f'<b>\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞—Ç—å —ç–∫–∑!</b>', parse_mode='html')
        await self.bot.send_message(message.from_user.id, self.help_message, parse_mode='html')

    async def help_handler(self, message: Message):
        await self.bot.send_message(message.from_user.id, self.help_message, parse_mode='html')

    async def send_pdf(self, message: Message):
        pdf_file_path =  pathlib.Path(__package__).parent.absolute().joinpath('resources', 'Shpora.pdf')
        with open(pdf_file_path, 'rb') as pdf:
            await self.bot.send_document(message.chat.id, pdf)

    async def task_init_message(self, message: Message):
        await self.bot.send_message(message.chat.id, \
            "–ó–∞–¥–∞—á–∞: \n–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–µ–º–Ω–∏–∫–æ–≤")
        await self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≠–ü1 (—Å–ª–∏—Ç–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–º ';')\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 24.0;4;0.82;0.82")
        await self.bot.set_state(message.from_user.id, UserInformation.first_source_params, message.chat.id)

    async def set_first_source_params(self, message: Message):
        await self.bot.set_state(message.from_user.id, UserInformation.second_source_params, message.chat.id)
       
        async with self.bot.retrieve_data(message.from_user.id) as data:
            data['first_property'] = message.text

        params = parse_string_to_list(data['first_property'])
        await self.bot.send_message(message.chat.id, "<b>–≠–ü1:\n"\
                                                        f"P_–Ω–æ–ºi: {params[0]}\n"\
                                                        f"n_i: {params[1]}\n"\
                                                        f"K_i: {params[2]} \n"\
                                                        f"cosf: {params[3]}</b>", parse_mode='html')
        await self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≠–ü2 (—Å–ª–∏—Ç–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–º ';')\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 24.0;4;0.82;0.82")
 
    async def set_second_source_params(self, message: Message):  

        await self.bot.set_state(message.from_user.id, UserInformation.solver, message.chat.id)
      
        async with self.bot.retrieve_data(message.from_user.id) as data:
            data['second_property'] = message.text

        params = parse_string_to_list(data['second_property'])
        await self.bot.send_message(message.chat.id, "<b>–≠–ü2:\n"\
                                                        f"P_–Ω–æ–ºi: {params[0]}\n"\
                                                        f"n_i: {params[1]}\n"\
                                                        f"K_i: {params[2]} \n"\
                                                        f"cosf: {params[3]}</b>", parse_mode='html')

        await self.bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n–ï—Å–ª–∏ –≤—Å–µ –û–ö –≤–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–∞—Ä—Ç</b>", parse_mode='html')


    async def solve_task(self, message: Message):

        async with self.bot.retrieve_data(message.from_user.id) as data:
            first_params = parse_string_to_list(data['first_property'])
            second_params = parse_string_to_list(data['second_property'])

        await self.bot.send_message(message.chat.id, "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –î–õ–Ø –≠–ü ‚Ññ1:\n"\
                                                        f"{solve_first(first_params)}</b>", parse_mode='html')

        await self.bot.send_message(message.chat.id, "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –î–õ–Ø –≠–ü ‚Ññ2:\n"\
                                                        f"{solve_second(second_params)}</b>", parse_mode='html')

        await self.bot.delete_state(message.from_user.id, message.chat.id)

    async def send_github_link(self, message: Message):
        await self.bot.send_message(message.chat.id, "https://github.com/Su1tan05/exam_bot")

    help_message = \
                '<b>–ò –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'\
                '/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n'\
                '\n'\
                '/shpora ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —à–ø–æ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf\n'\
                '\n'\
                '/solver ‚Äî —Ä–∞—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>'

    ep1_msg = \
        '<b>–≠–ü1:\n'\
        'P_–Ω–æ–ºi: \n'\
        'n_i: \n'\
        'K_i: \n'\
        'cosf: \n'\
        'l: </b>'